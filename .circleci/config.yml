version: 2
jobs:
  service_up:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      # network
      OC_SERVICES_PORT: 7031
      PASSTHROUGH_ENDPOINT: 7055
      OC_SERVICES_PORT_MAINNET: 7095
      OC_SERVICES_PORT_ROPSTEN: 7096

      # docker network
      DOCKER_NETWORK: ocs_services_network
      STAGING_DOCKER_NETWORK: staging_ocs_services_network      

      # docker containers
      CONTAINER: ocs_services_container
      CONTAINER_RELEX: ocs_services_relex_container
      STAGING_CONTAINER: staging_ocs_container
      STAGING_CONTAINER_RELEX: staging_ocs_relex_container

      # docker images
      IMAGE: ocs_services_image
      IMAGE_RELEX: ocs_services_relex_image
      STAGING_IMAGE: staging_ocs_services_image
      STAGING_IMAGE_RELEX: staging_ocs_relex

      # deployment branch
      DEPLOYMENT_BRANCH: master
      REPOSITORY: opencog-services

      # general config
      WORKDIR: /tmp/opencog-services
    steps:
    - run:
        name: info
        command: |-
          echo "pull-request source owner: ${CIRCLE_USERNAME,,}"
          echo "pull-request target owner: ${CIRCLE_PROJECT_USERNAME,,}"
          echo "repository url: ${CIRCLE_REPOSITORY_URL}"
          echo "pull-request branch: ${CIRCLE_BRANCH}"
    - run:
        name: rehearsal setup
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF            
            # pre-cleaning
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER}
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX}
            docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE}
            docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX}

            docker network rm ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK}
            rm -rf ${WORKDIR}

            # create network for this service
            docker network create ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK}
            
            # create workdir
            mkdir ${WORKDIR}
          EOF
    - run:
        name: rehearsal build
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            # need to be cloned because the dockerfile is adding files from the docker env to the project's root
            cd ${WORKDIR}
            git clone -b ${CIRCLE_BRANCH} https://github.com/${CIRCLE_USERNAME}/opencog-services.git
            cd opencog-services

            # build images, relex and opencog
            docker build -t ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} \
              --no-cache \
              --build-arg snetd_version=${SNETD_VERSION} \
              --build-arg network=${NETWORK} \
              --build-arg ethereum_json_rpc_endpoint=${ETHEREUM_JSON_RPC_ENDPOINT} \
              --build-arg free_call_signer_address=${FREE_CALL_SIGNER_ADDRESS} \
              --build-arg pvt_key_for_metering=${PVT_KEY_FOR_METERING} \
              -f OpenCogServices .

            docker build -t ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} \
              --no-cache \
              -f OpenCogRelex .
          EOF
    - run:
        name: rehearsal run
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker run --name ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} \
              --restart unless-stopped \
              --network ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} \
              -di ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} bash opencog-server.sh

            docker run --name ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} \
              --env RELEX_CONTAINER_NAME=${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} \
              --env OPENCOG_SERVER_PORT=${OC_SERVICES_PORT} \
              --env RELEX_PORT=4444 \
              --restart unless-stopped \
              --network ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} \
              -v /home/ubuntu/opencog-services/config:/config \
              -v /etc/letsencrypt:/etc/letsencrypt \
              -v /home/ci/singnet/.certs:/opt/singnet/.certs \
              -di ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} tail -f /dev/null
          EOF
    - run:
        name: integration tests
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker exec -i ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} ./bin/runTests
          EOF
    - run:
        name: compliance check
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker exec -i ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} scripts/compliance_check.sh
          EOF
    - run:
        name: daemon check
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker exec -id ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} snetd --config ./snetd_configs/snetd.mainnet.json
          EOF
    - run:
        name: cleaning rehearsal containers, networks, and folders
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            # remove staging containers and networks
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER}
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX}
            docker network rm ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK}
            rm -rf ${WORKDIR}
          EOF
    - run:
        name: create old deploy backup
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE}_bkp || true
            docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX}_bkp || true
            docker tag ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE} ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE}_bkp || true
            docker tag ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX} ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX}_bkp || true
          EOF
    - run:
        name: cleaning old deploy environment
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker rm -f ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER} || true
            docker rm -f ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER_RELEX} || true
            docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE} || true
            docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX} || true
            docker network rm ${CIRCLE_PROJECT_USERNAME,,}_${DOCKER_NETWORK} || true
          EOF
    - run:
        name: rehearsal consolidation
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker tag ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE}
            docker tag ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX}
          EOF
    - run:
        name: cleaning rehearsal images
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE}
            docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX}
          EOF
    - run:
        name: deploy setup
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker network create ${CIRCLE_PROJECT_USERNAME,,}_${DOCKER_NETWORK}
          EOF
    - run:
        name: deploy
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            # run servers, relex and opencog
            docker run --name ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER_RELEX} \
              --restart unless-stopped \
              --network ${CIRCLE_PROJECT_USERNAME,,}_${DOCKER_NETWORK} \
              -di ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX} bash opencog-server.sh

            docker run --name ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER} \
              --env RELEX_CONTAINER_NAME=${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER_RELEX} \
              --env OPENCOG_SERVER_PORT=${PASSTHROUGH_ENDPOINT} \
              --env RELEX_PORT=4444 \
              --restart unless-stopped \
              --network ${CIRCLE_PROJECT_USERNAME,,}_${DOCKER_NETWORK} \
              -v /home/ubuntu/opencog-services/config:/config \
              -v /etc/letsencrypt:/etc/letsencrypt \
              -v /home/ci/singnet/.certs:/opt/singnet/.certs \
              $([ "${CIRCLE_PROJECT_USERNAME,,}" = "singnet" ] && echo "-p ${OC_SERVICES_PORT_MAINNET}:${OC_SERVICES_PORT_MAINNET}" || echo "") \
              $([ "${CIRCLE_PROJECT_USERNAME,,}" = "singnet" ] && echo "-p ${OC_SERVICES_PORT_ROPSTEN}:${OC_SERVICES_PORT_ROPSTEN}" || echo "") \
              -di ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE} bash -c "./bin/server & snetd --config ./snetd_configs/snetd.mainnet.json"
          EOF
    - run:
        name: cleaning
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            if [ ${CIRCLE_PROJECT_USERNAME,,} = ${CIRCLE_USERNAME,,} ] ; then
              docker rm -f ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER_RELEX}
              docker rm -f ${CIRCLE_PROJECT_USERNAME,,}_${CONTAINER}
              docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE_RELEX}
              docker rmi -f ${CIRCLE_PROJECT_USERNAME,,}_${IMAGE}
              docker network rm ${CIRCLE_PROJECT_USERNAME,,}_${DOCKER_NETWORK}
            fi
          EOF
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - service_up