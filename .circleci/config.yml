version: 2
jobs:
  service_up:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      # network
      OC_SERVICES_PORT: 7031
      RELEX_PORT: 7034
      PASSTHROUGH_ENDPOINT: 7055
      OC_SERVICES_PORT_MAINNET: 7095
      OC_SERVICES_PORT_ROPSTEN: 7096

      # docker network
      DOCKER_NETWORK: ocs_services_network
      STAGING_DOCKER_NETWORK: staging_ocs_services_network      

      # docker containers
      CONTAINER: ocs_services_container
      CONTAINER_RELEX: ocs_services_relex_container
      STAGING_CONTAINER: staging_ocs_container
      STAGING_CONTAINER_RELEX: staging_ocs_relex_container

      # docker images
      IMAGE: ocs_services_image
      IMAGE_RELEX: ocs_services_relex_image
      STAGING_IMAGE: staging_ocs_services_image
      STAGING_IMAGE_RELEX: staging_ocs_relex

      # general config
      WORKDIR: /tmp/opencog-services
    steps:
    - run:
        name: Setup
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF            
            # remove staging images and containers
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} || true
            docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} || true
            docker rmi ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} || true
            docker rmi ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} || true

            # re-create staging network
            docker network rm ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} || true
            
            # clear workdir
            rm -rf ${WORKDIR} || true
            mkdir ${WORKDIR} || true
          EOF
    - run:
        name: Build
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            # get source
            cd ${WORKDIR}
            git clone -b ${CIRCLE_BRANCH} https://github.com/${CIRCLE_USERNAME}/opencog-services.git
            cd opencog-services

            # build images, relex and opencog
            docker build -t ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} \
              --no-cache \
              --build-arg snetd_version=${SNETD_VERSION} \
              --build-arg network=${NETWORK} \
              --build-arg ethereum_json_rpc_endpoint=${ETHEREUM_JSON_RPC_ENDPOINT} \
              --build-arg free_call_signer_address=${FREE_CALL_SIGNER_ADDRESS} \
              --build-arg pvt_key_for_metering=${PVT_KEY_FOR_METERING} \
              -f OpenCogServices .

            docker build -t ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} \
              --no-cache \
              -f OpenCogRelex .
          EOF
    - run:
        name: Run
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF        
            docker network create ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} || true

            docker run --name ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} \
              --restart unless-stopped \
              --network ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} \
              -p ${RELEX_PORT}:$4444 \
              -di ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} /bin/sh opencog-server.sh

            docker run --name ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} \
              --env RELEX_CONTAINER_NAME=${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} \
              --env OPENCOG_SERVER_PORT=${OC_SERVICES_PORT} \
              --restart unless-stopped \
              --network ${CIRCLE_USERNAME,,}_${STAGING_DOCKER_NETWORK} \
              -p ${OC_SERVICES_PORT}:${OC_SERVICES_PORT} \
              -di ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} tail -f /dev/null
          EOF
    - run:
        name: Tests
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker exec -i ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} ./bin/runTests
          EOF
    - run:
        name: Compliance Check
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
            docker exec -i ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} scripts/compliance_check.sh
          EOF
    - run:
        name: Deploy
        command: |-
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
              if [ ${CIRCLE_REPOSITORY_URL} = "git@github.com:${DEPLOYMENT_GIT_OWNER}/opencog-services.git" ] && [ ${CIRCLE_BRANCH} = "${DEPLOYMENT_BRANCH}" ] ; then
                # clean environment from old deploy
                docker rm -f ${CIRCLE_USERNAME,,}_${CONTAINER} || true
                docker rm -f ${CIRCLE_USERNAME,,}_${CONTAINER_RELEX} || true
                docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER} || true
                docker rm -f ${CIRCLE_USERNAME,,}_${STAGING_CONTAINER_RELEX} || true

                # TODO:also remove images upon error
                # rmv old and stage images
                docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE} || true
                docker rmi -f ${CIRCLE_USERNAME,,}_${STAGING_IMAGE_RELEX} || true
                docker rmi -f ${CIRCLE_USERNAME,,}_${IMAGE} || true
                docker rmi -f ${CIRCLE_USERNAME,,}_${IMAGE_RELEX} || true

                # build images, relex and opencog
                docker build -t ${CIRCLE_USERNAME,,}_${IMAGE} \
                  --no-cache \
                  --build-arg snetd_version=${SNETD_VERSION} \
                  --build-arg network=${NETWORK} \
                  --build-arg ethereum_json_rpc_endpoint=${ETHEREUM_JSON_RPC_ENDPOINT} \
                  --build-arg free_call_signer_address=${FREE_CALL_SIGNER_ADDRESS} \
                  --build-arg pvt_key_for_metering=${PVT_KEY_FOR_METERING} \
                  -f OpenCogServices .

                docker build -t ${CIRCLE_USERNAME,,}_${IMAGE_RELEX} \
                  --no-cache \
                  -f OpenCogRelex .

                # TODO:do this in a better way
                # reset current network
                docker network rm ${CIRCLE_USERNAME,,}_${DOCKER_NETWORK} || true
                docker network create ${CIRCLE_USERNAME,,}_${DOCKER_NETWORK} || true
 
                # run servers, relex and opencog
                docker run --name ${CIRCLE_USERNAME,,}_${CONTAINER_RELEX} \
                  --restart unless-stopped \
                  --network ${CIRCLE_USERNAME,,}_${DOCKER_NETWORK} \
                  -p ${RELEX_PORT}:4444 \
                  -di ${CIRCLE_USERNAME,,}_${IMAGE_RELEX} bash -c 'opencog-server.sh'

               docker run --name ${CIRCLE_USERNAME,,}_${CONTAINER} \
                 --env RELEX_CONTAINER_NAME=${CIRCLE_USERNAME,,}_${CONTAINER_RELEX} \
                 --env OPENCOG_SERVER_PORT=${PASSTHROUGH_ENDPOINT} \
                 --restart unless-stopped \
                 --network ${CIRCLE_USERNAME,,}_${DOCKER_NETWORK} \
                 -v /home/ubuntu/opencog-services/config:/config \
                 -v /home/ubuntu/opencog-services/etcd:/etcd \
                 -v /home/ubuntu/opencog-services/storage-data-dir-1.etcd:/storage-data-dir-1.etcd \
                 -v /etc/letsencrypt:/etc/letsencrypt \
                 -v ~/singnet/.certs:/opt/singnet/.certs \
                 -p ${OC_SERVICES_PORT_MAINNET}:${OC_SERVICES_PORT_MAINNET} \
                 -p ${OC_SERVICES_PORT_ROPSTEN}:${OC_SERVICES_PORT_ROPSTEN} \
                 -di ${CIRCLE_USERNAME,,}_${IMAGE} bash -c 'run.sh'
                 
              else
                  echo "Repository: ${CIRCLE_REPOSITORY_URL}"
                  echo "Branch: ${CIRCLE_BRANCH}"
                  echo "================================================================================"
                  echo "                        Service WILL NOT be deployed"
                  echo "================================================================================"
              fi
          EOF

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - service_up
