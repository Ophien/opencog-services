version: 2
jobs:
  service_up:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      # network
      OC_SERVICES_PORT: 7031
      RELEX_PORT: 7034
      PASSTHROUGH_ENDPOINT: 7055
      OC_SERVICES_PORT_MAINNET: 7095
      OC_SERVICES_PORT_ROPSTEN: 7096

      # docker network
      NETWORK: opencog_services_network
      
      # docker containers
      CONTAINER: opencog_services_container
      CONTAINER_RELEX: opencog_services_relex_container
      STAGING_CONTAINER: staging_ocs_container
      STAGING_CONTAINER_RELEX: staging_ocs_relex_container

      # docker images
      IMAGE: opencog_services_image
      IMAGE_RELEX: opencog_services_relex_image

      # general config
      DEPLOYMENT_GIT_OWNER: singnet
      DEPLOYMENT_BRANCH: master
      WORKDIR: /tmp
      USER: ${CIRCLE_USERNAME,,}
    steps:
    - run:
        name: Staging Build
        command: |
          git clone https://github.com/${DEPLOYMENT_GIT_OWNER}/opencog-services.git
          cd opencog-services
          docker build -t ${USER}_${IMAGE} \
            --build-arg snetd_version=${SNETD_VERSION} \
            --build-arg private_key_for_metering=${PRIVATE_KEY_FOR_METERING} \
            --build-arg etcd_end_point=${ETCD_END_POINT} \
            -f OpenCogServices .
          docker build -t ${USER}_${IMAGE_RELEX} -f OpenCogRelex .
    - run:
        name: Staging Run
        command: |
          docker run --name ${USER}_${STAGING_CONTAINER_RELEX} \
            --restart unless-stopped \
            --network ${NETWORK} \
            -p ${RELEX_PORT}:$4444 \
            -di ${USER}_${IMAGE_RELEX} /bin/sh opencog-server.sh

          docker run --name ${USER}_${STAGING_CONTAINER} \
            --env RELEX_CONTAINER_NAME=${USER}_${STAGING_CONTAINER_RELEX} \
            --env OPENCOG_SERVER_PORT=${OC_SERVICES_PORT} \
            --restart unless-stopped \
            --network ${NETWORK} \
            -p ${OC_SERVICES_PORT}:${OC_SERVICES_PORT} \
            -di ${USER}_${IMAGE} tail -f /dev/null
    - run:
        name: Staging Tests
        command: |
          docker exec -i ${USER}_${STAGING_CONTAINER} ./bin/runTests
    - run:
        name: Staging Compliance Check
        command: |
          docker exec -i ${USER}_${STAGING_CONTAINER} scripts/compliance_check.sh
    - run:
        name: Deploy
        command: |
          ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} << EOF
              if [ ${CIRCLE_REPOSITORY_URL} = "git@github.com:${DEPLOYMENT_GIT_OWNER}/opencog-services.git" ] && [ ${CIRCLE_BRANCH} = "${DEPLOYMENT_BRANCH}" ] ; then
                # clean environment from old deploy
                docker rm -f ${USER}_${CONTAINER} || true
                docker rm -f ${USER}_${CONTAINER_RELEX} || true
                docker rmi -f ${USER}_${IMAGE} || true
                docker rmi -f ${USER}_${IMAGE_RELEX} || true

                # rm old git repo 
                # TODO: check if the repository exists and just do git pull
                cd ${WORKDIR}
                rm -rf opencog-services || true
                git clone https://github.com/${DEPLOYMENT_GIT_OWNER}/opencog-services.git
                cd opencog-services

                # build new images
                docker build -t ${USER}_${IMAGE} \
                  --no-cache \
                  --build-arg snetd_version=${SNETD_VERSION} \
                  --build-arg private_key_for_metering=${PRIVATE_KEY_FOR_METERING} \
                  --build-arg etcd_end_point=${ETCD_END_POINT} \
                  -f OpenCogServices .

                docker build -t ${USER}_${IMAGE_RELEX} \
                  --no-cache \
                  -f OpenCogRelex .

                # run servers, relex and opencog
                docker run --name ${USER}_${CONTAINER_RELEX} \
                  --restart unless-stopped \
                  --network ${NETWORK} \
                  --p ${RELEX_PORT}:4444 \
                  -di ${USER}_${IMAGE_RELEX} bash -c 'opencog-server.sh'

               docker run --name ${USER}_${CONTAINER} \
                 --env RELEX_CONTAINER_NAME=${USER}_${CONTAINER_RELEX} \
                 --env OPENCOG_SERVER_PORT=${PASSTHROUGH_ENDPOINT} \
                 --restart unless-stopped \
                 --network ${NETWORK} \
                 -v ${CERTIFICATES_FOLDER} \
                 -p ${OC_SERVICES_PORT_MAINNET}:${OC_SERVICES_PORT_MAINNET} \
                 -p ${OC_SERVICES_PORT_ROPSTEN}:${OC_SERVICES_PORT_ROPSTEN} \
                 -di ${USER}_${IMAGE} bash -c 'run.sh'
                 
              else
                  echo "Repository: ${CIRCLE_REPOSITORY_URL}"
                  echo "Branch: ${CIRCLE_BRANCH}"
                  echo "================================================================================"
                  echo "                        Service WILL NOT be deployed"
                  echo "================================================================================"
              fi
          EOF

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - service_up
